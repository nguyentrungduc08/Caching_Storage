/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef user_profile_TYPES_H
#define user_profile_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace Task1 {

typedef std::vector<class UserProfile>  listUser;

typedef int32_t idcounter;

class UserProfile;

typedef struct _UserProfile__isset {
  _UserProfile__isset() : uid(false), name(false), age(false), gender(false) {}
  bool uid :1;
  bool name :1;
  bool age :1;
  bool gender :1;
} _UserProfile__isset;

class UserProfile : public virtual ::apache::thrift::TBase {
 public:

  UserProfile(const UserProfile&);
  UserProfile& operator=(const UserProfile&);
  UserProfile() : uid(0), name(), age(0), gender(0) {
  }

  virtual ~UserProfile() throw();
  int32_t uid;
  std::string name;
  int16_t age;
  int8_t gender;

  _UserProfile__isset __isset;

  void __set_uid(const int32_t val);

  void __set_name(const std::string& val);

  void __set_age(const int16_t val);

  void __set_gender(const int8_t val);

  bool operator == (const UserProfile & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(age == rhs.age))
      return false;
    if (!(gender == rhs.gender))
      return false;
    return true;
  }
  bool operator != (const UserProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserProfile &a, UserProfile &b);

std::ostream& operator<<(std::ostream& out, const UserProfile& obj);

} // namespace

#endif
