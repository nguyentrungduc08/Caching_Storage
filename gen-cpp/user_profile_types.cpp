/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "user_profile_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Task1 {


UserProfile::~UserProfile() throw() {
}


void UserProfile::__set_uid(const int32_t val) {
  this->uid = val;
}

void UserProfile::__set_name(const std::string& val) {
  this->name = val;
}

void UserProfile::__set_age(const int16_t val) {
  this->age = val;
}

void UserProfile::__set_gender(const int8_t val) {
  this->gender = val;
}
std::ostream& operator<<(std::ostream& out, const UserProfile& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UserProfile::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->age);
          this->__isset.age = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->gender);
          this->__isset.gender = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserProfile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserProfile");

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("age", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->age);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gender", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->gender);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserProfile &a, UserProfile &b) {
  using ::std::swap;
  swap(a.uid, b.uid);
  swap(a.name, b.name);
  swap(a.age, b.age);
  swap(a.gender, b.gender);
  swap(a.__isset, b.__isset);
}

UserProfile::UserProfile(const UserProfile& other0) {
  uid = other0.uid;
  name = other0.name;
  age = other0.age;
  gender = other0.gender;
  __isset = other0.__isset;
}
UserProfile& UserProfile::operator=(const UserProfile& other1) {
  uid = other1.uid;
  name = other1.name;
  age = other1.age;
  gender = other1.gender;
  __isset = other1.__isset;
  return *this;
}
void UserProfile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserProfile(";
  out << "uid=" << to_string(uid);
  out << ", " << "name=" << to_string(name);
  out << ", " << "age=" << to_string(age);
  out << ", " << "gender=" << to_string(gender);
  out << ")";
}

} // namespace
